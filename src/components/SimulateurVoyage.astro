---
// src/components/SimulateurVoyage.astro
import garesAvecActivitesData from "../assets/garesAvecActivites.json";
import departementsgeojsonData from "../assets/departementsgeojson.json";

// Préparer les régions uniques
const regionsUniques = [
    "Toutes",
    ...new Set(
        garesAvecActivitesData
            .map((d: any) => d.region)
            .filter((r: string) => r !== "Non définie"),
    ),
].sort();
---

<div class="w-full max-w-7xl mx-auto font-sans">
    <!-- Filtres interactifs -->
    <div
        class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 bg-white p-6 rounded-lg shadow-md"
    >
        <!-- Sélection région -->
        <div>
            <label
                for="region-select"
                class="block text-sm font-semibold mb-2 text-gray-800"
            >
                🗺️ Région
            </label>
            <select
                id="region-select"
                class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg outline-none transition-colors duration-200 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200"
            >
                {
                    regionsUniques.map((region) => (
                        <option value={region} selected={region === "Toutes"}>
                            {region}
                        </option>
                    ))
                }
            </select>
        </div>

        <!-- Seuil POI -->
        <div>
            <label
                for="seuil-poi"
                class="flex justify-between text-sm font-semibold mb-2 text-gray-800"
            >
                <span>✨ Points d'intérêt minimum</span>
                <span id="seuil-value" class="text-indigo-600 font-bold"
                    >50</span
                >
            </label>
            <input
                type="range"
                id="seuil-poi"
                min="0"
                max="300"
                step="10"
                value="50"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-500"
            />
        </div>

        <!-- Nombre de gares -->
        <div>
            <label
                for="nombre-gares"
                class="flex justify-between text-sm font-semibold mb-2 text-gray-800"
            >
                <span>🚉 Nombre de gares à afficher</span>
                <span id="nombre-value" class="text-indigo-600 font-bold"
                    >10</span
                >
            </label>
            <input
                type="range"
                id="nombre-gares"
                min="1"
                max="20"
                step="1"
                value="10"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-500"
            />
        </div>
    </div>

    <!-- Carte -->
    <div
        id="map-container"
        class="w-full overflow-x-auto rounded-lg shadow-lg bg-white"
    >
    </div>
</div>

<script>
    import * as Plot from "@observablehq/plot";
    import * as d3 from "d3";
    import garesAvecActivitesData from "../assets/garesAvecActivites.json";
    import departementsgeojsonData from "../assets/departementsgeojson.json";

    const garesAvecActivites = garesAvecActivitesData;
    const departementsgeojson = departementsgeojsonData;

    // État des filtres
    let regionSelectionnee = "Toutes";
    let seuilPOI = 50;
    let nombreGaresMax = 10;

    // Fonction de filtrage
    function filtrerGares() {
        let resultats = garesAvecActivites
            .filter((d: any) => d.region !== "Non définie")
            .filter((d: any) => d.nombrePOI >= seuilPOI);

        if (regionSelectionnee !== "Toutes") {
            resultats = resultats.filter(
                (d: any) => d.region === regionSelectionnee,
            );
        }

        return resultats
            .sort((a: any, b: any) => b.nombrePOI - a.nombrePOI)
            .slice(0, nombreGaresMax);
    }

    // Fonction de création de carte
    function createMap() {
        const container = document.getElementById("map-container");
        if (!container) return;

        container.innerHTML = "";

        const garesFiltrees = filtrerGares();

        // Si aucun résultat
        if (garesFiltrees.length === 0) {
            container.innerHTML = `
        <div class="text-center py-16 bg-gray-50 rounded-xl">
          <div class="text-6xl mb-5">🔍</div>
          <div class="text-xl font-semibold mb-3 text-gray-800">Aucun résultat</div>
          <div class="text-gray-600">Essayez de modifier vos critères de recherche</div>
        </div>
      `;
            return;
        }

        const plot = Plot.plot({
            width: 1000,
            height: 700,
            marginTop: 60,
            marginRight: 220,
            marginBottom: 80,
            marginLeft: 80,
            style: {
                fontSize: "15px",
                fontFamily: "'Inter', system-ui, sans-serif",
                background: "white",
            },
            projection: {
                type: "mercator",
                domain: departementsgeojson,
            },
            color: {
                type: "linear",
                domain: [
                    d3.min(garesFiltrees, (d: any) => d.nombrePOI),
                    d3.max(garesFiltrees, (d: any) => d.nombrePOI),
                ],
                range: ["#ffd93d", "#d32f2f"],
                legend: true,
                label: "Points d'intérêt",
            },
            marks: [
                Plot.geo(departementsgeojson, {
                    fill: "#f5f5f5",
                    stroke: "#ddd",
                    strokeWidth: 0.5,
                }),

                Plot.dot(garesFiltrees, {
                    x: "longitude",
                    y: "latitude",
                    r: (d: any) => Math.sqrt(d.nombrePOI) * 2,
                    fill: "nombrePOI",
                    fillOpacity: 0.8,
                    stroke: "white",
                    strokeWidth: 2.5,
                    tip: true,
                    title: (d: any) =>
                        `🚉 ${d.nom}\n━━━━━━━━━━━━━━━━━\n📍 ${d.region}\n🎯 ${
                            d.nombrePOI
                        } points d'intérêt\n✨ Classement: #${garesFiltrees.indexOf(d) + 1}`,
                }),

                Plot.text(garesFiltrees.slice(0, 5), {
                    x: "longitude",
                    y: "latitude",
                    text: "nom",
                    dy: -25,
                    fontSize: 11,
                    fontWeight: "700",
                    fill: "#d32f2f",
                    stroke: "white",
                    strokeWidth: 4,
                    paintOrder: "stroke",
                    textAnchor: "middle",
                }),
            ],
        });

        container.appendChild(plot);
    }

    // Event listeners
    document.addEventListener("DOMContentLoaded", () => {
        // Initial render
        createMap();

        // Région select
        const regionSelect = document.getElementById(
            "region-select",
        ) as HTMLSelectElement;
        regionSelect?.addEventListener("change", (e) => {
            regionSelectionnee = (e.target as HTMLSelectElement).value;
            createMap();
        });

        // Seuil POI range
        const seuilRange = document.getElementById(
            "seuil-poi",
        ) as HTMLInputElement;
        const seuilValue = document.getElementById("seuil-value");
        seuilRange?.addEventListener("input", (e) => {
            seuilPOI = parseInt((e.target as HTMLInputElement).value);
            if (seuilValue) seuilValue.textContent = seuilPOI.toString();
            createMap();
        });

        // Nombre gares range
        const nombreRange = document.getElementById(
            "nombre-gares",
        ) as HTMLInputElement;
        const nombreValue = document.getElementById("nombre-value");
        nombreRange?.addEventListener("input", (e) => {
            nombreGaresMax = parseInt((e.target as HTMLInputElement).value);
            if (nombreValue)
                nombreValue.textContent = nombreGaresMax.toString();
            createMap();
        });
    });
</script>
