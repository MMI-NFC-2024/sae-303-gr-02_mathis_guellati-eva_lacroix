---
// ComparaisonEmissions.astro
import dataEmission from "../assets/data_emission.json";

const transports = [
  {
    nom: "Train",
    emoji: "üöÇ",
    champ: "train_empreinte_carbone_kgco2e",
    description: "Train longue distance",
  },
  {
    nom: "Autocar",
    emoji: "üöå",
    champ: "autocar_longue_distance_empreinte_carbone_kgco2e",
    description: "Autocar longue distance",
  },
  {
    nom: "Avion",
    emoji: "‚úàÔ∏è",
    champ: "avion_empreinte_carbone_kgco2e",
    description: "Vol commercial",
  },
  {
    nom: "Voiture √©lectrique",
    emoji: "üîã",
    champ: "voiture_electrique_2_2_pers_empreinte_carbone_kgco2e",
    description: "Voiture √©lectrique (2 pers.)",
  },
  {
    nom: "Voiture thermique",
    emoji: "‚õΩ",
    champ: "voiture_thermique_2_2_pers_empreinte_carbone_kgco2e",
    description: "Voiture essence/diesel (2 pers.)",
  },
];
---

<div class="w-full max-w-7xl mx-auto">
  <div class="card-body relative pt-20 px-0">
    <div id="comparaison-chart" class="w-full"></div>
  </div>
</div>

<p class="mt-8 mb-4 text-sm text-info italic">
  √âmissions moyennes de CO‚ÇÇ par moyen de transport (toutes routes confondues) |
  Sources : Base de donn√©es comparatives des √©missions de CO‚ÇÇ ‚Äì data.gouv.fr
</p>

<p class="mt-6 text-sm text-info italic border-t border-base-300 pt-4">
  Sources : Base de donn√©es comparatives des √©missions de CO‚ÇÇ ‚Äì data.gouv.fr
</p>

<div class="alert alert-success bg-secondary mt-14">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="stroke-current shrink-0 h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
  </svg>
  <div>
    <h3 class="font-bold">Comment utiliser la carte ?</h3>
    <ul class="mt-2 ml-4 list-disc text-sm">
      <li>Pannez et zoomez pour explorer la zone d‚Äôint√©r√™t.</li>
      <li>Cliquez sur un marqueur pour voir les d√©tails d‚Äô√©missions li√©s.</li>
      <li>
        Utilisez les contr√¥les de filtre pour s√©lectionner le mode de transport
        affich√©.
      </li>
    </ul>
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import * as d3 from "d3";
  import dataEmission from "../assets/data_emission.json";

  const transportsStatic = [
    {
      nom: "Train",
      emoji: "üöÇ",
      champ: "train_empreinte_carbone_kgco2e",
      description: "Train longue distance",
    },
    {
      nom: "Autocar",
      emoji: "üöå",
      champ: "autocar_longue_distance_empreinte_carbone_kgco2e",
      description: "Autocar longue distance",
    },
    {
      nom: "Avion",
      emoji: "‚úàÔ∏è",
      champ: "avion_empreinte_carbone_kgco2e",
      description: "Vol commercial",
    },
    {
      nom: "Voiture √©lectrique",
      emoji: "üîã",
      champ: "voiture_electrique_2_2_pers_empreinte_carbone_kgco2e",
      description: "Voiture √©lectrique (2 pers.)",
    },
    {
      nom: "Voiture thermique",
      emoji: "‚õΩ",
      champ: "voiture_thermique_2_2_pers_empreinte_carbone_kgco2e",
      description: "Voiture essence/diesel (2 pers.)",
    },
  ];

  function createComparaisonChart() {
    const container = document.getElementById("comparaison-chart");
    if (!container) return;

    container.innerHTML = "";

    const donnees = transportsStatic.map((t) => {
      const valeurs = dataEmission
        .map((d) => d[t.champ])
        .filter((v) => v != null && !isNaN(v));

      const moyenne = d3.mean(valeurs);
      const min = d3.min(valeurs);
      const max = d3.max(valeurs);
      const mediane = d3.median(valeurs);

      return {
        transport: `${t.emoji} ${t.nom}`,
        emissions: moyenne || 0,
        min: min || 0,
        max: max || 0,
        mediane: mediane || 0,
        description: t.description,
        nbRoutes: valeurs.length,
      };
    });

    const minEmission = d3.min(donnees, (d) => d.emissions) || 0;
    const maxEmission = d3.max(donnees, (d) => d.emissions) || 1;

    const plot = Plot.plot({
      width: 1000,
      marginLeft: 200,
      marginRight: 100,
      marginTop: 60,
      height: 480,
      style: {
        fontSize: "15px",
        fontFamily: "system-ui, -apple-system, sans-serif",
        background: "white",
        borderRadius: "8px",
        boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
      },
      x: {
        label: "√âmissions moyennes de CO‚ÇÇ (kg CO‚ÇÇe) ‚Üí",
        tickFormat: (d) =>
          d.toLocaleString("fr-FR", { maximumFractionDigits: 0 }),
        grid: true,
        nice: true,
        labelOffset: 50,
      },
      y: { label: null, tickPadding: 10 },
      color: {
        type: "linear",
        domain: [minEmission, maxEmission],
        range: ["#2ecc71", "#f1c40f", "#e74c3c"],
        legend: false,
      },
      marks: [
        Plot.barX(donnees, {
          y: "transport",
          x: "emissions",
          fill: "emissions",
          sort: { y: "-x" },
          rx: 8,
          tip: { format: { y: false, x: true, fill: false } },
          title: (d) =>
            `${d.transport}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚úì Moyenne: ${d.emissions.toFixed(1)} kg CO‚ÇÇe\n‚úì M√©diane: ${d.mediane.toFixed(1)} kg CO‚ÇÇe\n‚úì Min: ${d.min.toFixed(1)} kg CO‚ÇÇe\n‚úì Max: ${d.max.toFixed(1)} kg CO‚ÇÇe\n‚úì ${d.description}\n‚úì ${d.nbRoutes} routes analys√©es`,
        }),
        Plot.text(donnees, {
          y: "transport",
          x: "emissions",
          text: (d) => `${d.emissions.toFixed(0)} kg`,
          dx: 50,
          fontSize: 14,
          fontWeight: "700",
          fill: (d) =>
            d3.interpolateRgbBasis(["#2ecc71", "#f1c40f", "#e74c3c"])(
              (d.emissions - minEmission) / (maxEmission - minEmission)
            ),
          textAnchor: "start",
        }),
      ],
    });

    container.appendChild(plot);

    // Cr√©er la l√©gende personnalis√©e en position absolute
    const legend = document.createElement("div");
    legend.className =
      "absolute top-4 left-4 badge badge-lg gap-2 bg-base-100 shadow-md border border-base-300";
    legend.innerHTML = `
            <div class="flex items-center gap-3 p-0 py-2">
                <span class="font-semibold text-sm">√âmissions CO‚ÇÇ:</span>
                <div class="flex  gap-1">
                    <div class="w-3 h-3 rounded-full bg-[#2ecc71]"></div>
                    <span class="text-xs">Faible</span>
                </div>
                <div class="flex items-center gap-1">
                    <div class="w-3 h-3 rounded-full bg-[#f1c40f]"></div>
                    <span class="text-xs">Moyen</span>
                </div>
                <div class="flex items-center gap-1">
                    <div class="w-3 h-3 rounded-full bg-[#e74c3c]"></div>
                    <span class="text-xs">√âlev√©</span>
                </div>
            </div>
        `;
    container.appendChild(legend);
  }

  document.addEventListener("DOMContentLoaded", () => {
    createComparaisonChart();
  });
</script>
