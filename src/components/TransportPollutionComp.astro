<div class="w-full max-w-6xl mx-auto p-6">
  <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
    <label
      for="voyageurs-slider"
      class="flex justify-between text-base font-semibold mb-2 text-gray-800"
    >
      <span>üö∂ Nombre de voyageurs passant de la voiture au train</span>
      <span id="simulateur-voyageurs-value" class="text-indigo-600 font-bold"
        >1 000</span
      >
    </label>
    <input
      type="range"
      id="voyageurs-slider"
      min="100"
      max="10000"
      step="100"
      value="1000"
      class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-500"
    />
  </div>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div
      class="bg-gradient-to-br from-accent to-cyan-500 text-white p-6 rounded-xl shadow-lg"
    >
      <div class="text-sm font-semibold opacity-90 mb-1">CO‚ÇÇ √©conomis√©</div>
      <div id="simulateur-co2-economise" class="text-4xl font-black mb-1">
        115 kg
      </div>
      <div class="text-sm opacity-90">par trajet de 400 km</div>
    </div>

    <div
      class="bg-gradient-to-br from-success to-secondary text-white p-6 rounded-xl shadow-lg"
    >
      <div class="text-sm font-semibold opacity-90 mb-1">
        üå≥ √âquivalent arbres
      </div>
      <div id="simulateur-arbres-equiv" class="text-4xl font-black mb-1">5</div>
      <div class="text-sm opacity-90">arbres plant√©s par an</div>
    </div>

    <div
      class="bg-gradient-to-br from-rose-600/90 to-rose-500/80 text-white p-6 rounded-xl shadow-lg"
    >
      <div class="text-sm font-semibold opacity-90 mb-1">
        üöó Voitures retir√©es
      </div>
      <div id="simulateur-voitures-retirees" class="text-4xl font-black mb-1">
        0
      </div>
      <div class="text-sm opacity-90">
        de la circulation (√©quivalent annuel)
      </div>
    </div>
  </div>

  <div class="bg-white rounded-xl shadow-lg p-6 overflow-x-auto">
    <div id="simulateur-chart" class="w-full"></div>
  </div>

  <p class="mt-8 mb-4 text-sm text-info italic">
    √âmissions CO‚ÇÇ pour un trajet de 400 km (Paris-Lyon)
  </p>

  <p class="mt-6 text-sm text-info italic border-t border-base-300 pt-4">
    Sources : ADEME, SNCF 2025 ‚Ä¢ √âmissions CO‚ÇÇ pour un trajet de 400 km
    (Paris-Lyon)
  </p>

<div class="alert alert-success bg-secondary mt-14">
    <svg
        xmlns="http://www.w3.org/2000/svg"
        class="stroke-current shrink-0 h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        aria-hidden="true"
    >
        <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
        ></path>
    </svg>
    <div>
        <h3 class="font-bold">Comment utiliser la carte ?</h3>
        <div class="text-sm">
            <ul class="list-disc list-inside mt-2">
                <li>D√©placez le curseur pour d√©finir le nombre de voyageurs passant de la voiture au train.</li>
                <li>Les indicateurs (CO‚ÇÇ √©conomis√©, √©quivalent arbres, voitures retir√©es) se mettent √† jour automatiquement.</li>
                <li>Survolez les courbes du graphique pour voir les info-bulles d√©taill√©es (tonnes CO‚ÇÇ par mode).</li>
                <li>Consultez les sources en bas de la page pour les hypoth√®ses et les valeurs utilis√©es.</li>
            </ul>
        </div>
    </div>
</div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import * as d3 from "d3";

  const distanceKm = 400;
  const emissionsData = {
    avion: { valeur: 0.23, emoji: "‚úàÔ∏è", nom: "Avion", couleur: "#e74c3c" },
    voiture: {
      valeur: 0.119,
      emoji: "üöó",
      nom: "Voiture",
      couleur: "#e67e22",
    },
    bus: { valeur: 0.068, emoji: "üöå", nom: "Bus", couleur: "#f39c12" },
    train: { valeur: 0.004, emoji: "üöÑ", nom: "Train", couleur: "#27ae60" },
  };

  function updateSimulateurStats(nombreVoyageurs) {
    const emissionVoiture = 0.119;
    const emissionTrain = 0.004;

    const co2Voiture = nombreVoyageurs * emissionVoiture;
    const co2Train = nombreVoyageurs * emissionTrain;
    const co2Economise = co2Voiture - co2Train;
    const co2EconomiseTonnes = co2Economise / 1000;

    const arbresEquivalent = Math.round(co2EconomiseTonnes * 45);
    const voituresRetirees = Math.round(co2EconomiseTonnes / 2.3);

    document.getElementById("simulateur-co2-economise").textContent =
      `${co2Economise.toFixed(0)} kg`;
    document.getElementById("simulateur-arbres-equiv").textContent =
      arbresEquivalent;
    document.getElementById("simulateur-voitures-retirees").textContent =
      voituresRetirees;
  }

  function createSimulateurChart(nombreVoyageurs) {
    const container = document.getElementById("simulateur-chart");
    if (!container) return;

    container.innerHTML = "";

    const data = [];
    for (const [mode, info] of Object.entries(emissionsData)) {
      for (let n = 0; n <= nombreVoyageurs + 100; n += 100) {
        data.push({
          voyageurs: n,
          co2: (n * distanceKm * info.valeur) / 1000,
          mode: `${info.emoji} ${info.nom}`,
          couleur: info.couleur,
        });
      }
    }

    const pointsActuels = data.filter(
      (d) => d.voyageurs === Math.floor(nombreVoyageurs / 100) * 100
    );

    const plot = Plot.plot({
      width: 900,
      height: 500,
      marginTop: 50,
      marginBottom: 70,
      marginLeft: 70,
      marginRight: 150,
      style: {
        fontFamily: "system-ui",
        fontSize: "14px",
        background: "white",
      },
      x: { label: "Nombre de voyageurs", grid: true, nice: true },
      y: { label: "‚Üë CO‚ÇÇ √©mis (tonnes)", grid: true, nice: true },
      color: {
        domain: ["‚úàÔ∏è Avion", "üöó Voiture", "üöå Bus", "üöÑ Train"],
        range: ["#e74c3c", "#e67e22", "#f39c12", "#27ae60"],
        legend: true,
      },
      marks: [
        Plot.line(data, {
          x: "voyageurs",
          y: "co2",
          stroke: "mode",
          strokeWidth: 3,
          curve: "catmull-rom",
          tip: true,
          title: (d) =>
            `${d.mode}\n${d.voyageurs.toLocaleString("fr-FR")} voyageurs\n${d.co2.toFixed(1)} tonnes CO‚ÇÇ`,
        }),
        Plot.dot(pointsActuels, {
          x: "voyageurs",
          y: "co2",
          fill: "mode",
          r: 6,
          stroke: "white",
          strokeWidth: 2,
        }),
      ],
    });

    container.appendChild(plot);
  }

  function updateSimulateur(nombreVoyageurs) {
    document.getElementById("simulateur-voyageurs-value").textContent =
      nombreVoyageurs.toLocaleString("fr-FR");
    updateSimulateurStats(nombreVoyageurs);
    createSimulateurChart(nombreVoyageurs);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const slider = document.getElementById("voyageurs-slider");
    updateSimulateur(1000);
    slider?.addEventListener("input", (e) => {
      const value = parseInt(e.target.value);
      updateSimulateur(value);
    });
  });
</script>
